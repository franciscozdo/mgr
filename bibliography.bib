@book{apue,
  series = {Addison-Wesley professional computing series},
  isbn = {0321637739},
  year = {2013},
  title = {Advanced programming in the UNIX environment},
  edition = {3rd edition.},
  language = {eng},
  author = {Stevens, W. Richard},
  keywords = {Operating systems (Computers); UNIX (Computer file)},
  publisher = {Addison-Wesley},
},
@book{kerrisk,
  author = {Kerrisk, Michael},
  title = {The Linux Programming Interface: A Linux and UNIX System Programming Handbook},
  year = {2010},
  isbn = {1593272200},
  publisher = {No Starch Press},
  address = {USA},
  edition = {1st},
},
@book{silberschatz,
  author    = {Abraham Silberschatz and Peter Baer Galvin and Greg Gagne},
  title     = {Operating System Concepts, 10th Edition},
  publisher = {Wiley},
  year      = {2018},
  url       = {http://os-book.com/OS10/index.html},
  isbn      = {978-1-118-06333-0},
},
@book{tannenbaum,
  title={Modern operating systems},
  author={Tanenbaum, Andrew S and Bos, Herbert},
  year={2015},
  publisher={Pearson}
},
@book{mckusick,
author = {McKusick, Marshall Kirk and Neville-Neil, George and Watson, Robert N.M.},
title = {The Design and Implementation of the FreeBSD Operating System},
year = {2014},
isbn = {0321968972},
publisher = {Addison-Wesley Professional},
edition = {2nd},
abstract = {The most complete, authoritative technical guide to FreeBSD's internal structure has now been extensively updated to cover all major improvements between Versions 5 and Version 11. Approximately one-third of this edition's content is completely new, and another one-third has been extensively rewritten. Three long-time FreeBSD project leaders begin with a concise overview of FreeBSD's current design and implementation. Next, they cover FreeBSD from the system-call level down: from interface to kernel to hardware. Explaining key design decisions, they detail the concepts, data structures, and algorithms used in implementing each significant systems facility, including process management, security, virtual memory, the I/O system, filesystems, socket IPC, and networking. This second edition: Explains lightweight virtualization and how it can support hundreds of instances on one system Describes fine-grained authority delegation for improved administrative flexibility Fully covers NFS V4 and OpenSolaris ZFS support Introduces BSD's enhanced volume management and new journaled soft updates Explains DTrace's fine-grained process debugging/profiling Reflects major improvements to networking, wireless, and USB support Readers can use this book as both a working reference and an in-depth study of a leading contemporary, portable, open source operating system. Technical and sales support professionals will discover both FreeBSD's capabilities and its limitations. Applications developers will learn how to effectively and efficiently interface with it; system administrators will learn how to maintain, tune, and configure it; and systems programmers will learn how to extend, enhance, and interface with it.}
}
@book{vahalia,
author = {Vahalia, Uresh},
title = {UNIX Internals: The New Frontiers},
year = {1995},
isbn = {0131019082},
publisher = {Prentice Hall Press},
address = {USA}
}
@misc{man:freebsd,
  title = "{F}ree{BSD} {M}anual {P}ages",
  year = "2017",
},
@misc{man:linux,
  title = "{L}inux {P}rogrammer's {M}anual",
  year = "2017",
},
@misc{man:netbsd,
  title = "{N}et{BSD} {M}anual {P}ages",
  year = "2016",
},
@online{mimiker:sources,
  title = {Mimiker repository},
  howpublished = {\url{https://github.com/cahirwpz/mimiker} Accessed: 2024-03-09},
},
@online{mimiker:wiki,
  title = {Mimiker project wiki},
  howpublished = {\url{https://github.com/cahirwpz/mimiker/wiki} Accessed: 2024-03-09},
},
@online{mimiker:website,
  title = {Mimiker website},
  howpublished = {\url{https://mimiker.ii.uni.wroc.pl/} Accessed: 2024-03-09},
},
@online{mimiker:opengrok,
  title = "{M}miker {O}pen{G}rok",
  howpublished = {\url{https://mimiker.ii.uni.wroc.pl/source/xref/mimiker/} Accessed: 2024-03-09},
},
@online{pyelftools:sources,
  title = {Python {\tt pyelftools} library},
  howpublished = {\url{https://github.com/eliben/pyelftools} Accessed: 2024-03-09},
},
@online{qemu:website,
  title = {Qemu website},
  howpublished = {\url{https://www.qemu.org/} Accessed: 2024-03-09},
},
@online{netbsd:sources,
  title = {NetBSD sources},
  howpublished = {\url{http://bxr.su/NetBSD/} Accessed: 2024-03-09},
},
@online{posix,
  title = "{POSIX Standard}",
  howpublished = {\url{https://pubs.opengroup.org/onlinepubs/9699919799/} Accessed: 2024-03-09},
},
@phdthesis{cranor,
author = {Cranor, Charles D.},
advisor = {Parulkar, Gurudatta M.},
title = {Design and Implementation of the UVM Virtual Memory System},
year = {1998},
isbn = {0599050535},
publisher = {Washington University},
address = {USA},
abstract = {We introduce UVM, a new virtual memory subsystem for 4.4BSD that makes better use of existing hardware memory management features to reduce overhead and improve performance. Our novel approach focuses on allowing processes to pass memory to and from other processes and the kernel, and to share memory. This approach reduces or eliminates the need to copy data thus reducing the time spent within the kernel and freeing up cycles for application processing. Unlike the approaches that focus exclusively on the networking and inter-process communications (IPC) subsystems, our approach provides a general framework for solutions that can improve efficiency of the entire I/O subsystem. Our primary objective in creating UVM was to produce a virtual memory system that provides a Unix-like operating system kernel's I/O and IPC subsystems with efficient VM-based data movement facilities that have less overhead than a traditional data copy. Our work seeks to: (1) allow a process to safely let a shared copy-on-write copy of its memory be used either by other processes, the I/O system, or the IPC system; (2) allow pages of memory from the I/O system, the IPC system, or from other processes to be inserted easily into a process' address space; and (3) allow processes and the kernel to exchange large chunks of their virtual address spaces using the VM system's higher-level memory mapping data structures.UVM allows processes to exchange and share memory through three innovative new mechanisms: page loanout, page transfer, and map entry passing. We present test results that show that our new VM-based data movement mechanisms are more efficient than data copying.UVM is implemented entirely within the framework of BSD and thus maintains all the features and standard parts of the traditional Unix environment that programmers have come to expect. The first release of UVM in NetBSD runs on several platforms including I386-PC, DEC Alpha, Sun Sparc, Motorola m68k, and DEC VAX systems. It is already being used on systems around the world.},
note = {AAI9907235}
},
@book{csapp,
  title={Computer Systems: A Programmer's Perspective (2nd Edition)},
  author={Bryant, R.E. and O'Hallaron, D.R.},
  isbn={9780136108047},
  lccn={2009053083},
  url={https://books.google.pl/books?id=ZGsPBQAAQBAJ},
  year={2010},
  publisher={Prentice Hall}
}
@article{denning,
author = {Denning, Peter J.},
title = {Virtual Memory},
year = {1996},
issue_date = {March 1996},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {28},
number = {1},
issn = {0360-0300},
url = {https://doi.org/10.1145/234313.234403},
doi = {10.1145/234313.234403},
journal = {ACM Comput. Surv.},
month = {mar},
pages = {213â€“216},
numpages = {4}
}
@book{memorysystems,
author = {Jacob, Bruce and Ng, Spencer and Wang, David},
title = {Memory Systems: Cache, DRAM, Disk},
year = {2007},
isbn = {0123797519},
publisher = {Morgan Kaufmann Publishers Inc.},
address = {San Francisco, CA, USA},
abstract = {Is your memory hierarchy stopping your microprocessor from performing at the high level it should be? Memory Systems: Cache, DRAM, Disk shows you how to resolve this problem. The book tells you everything you need to know about the logical design and operation, physical design and operation, performance characteristics and resulting design trade-offs, and the energy consumption of modern memory hierarchies. You learn how to to tackle the challenging optimization problems that result from the side-effects that can appear at any point in the entire hierarchy.As a result you will be able to design and emulate the entire memory hierarchy. . Understand all levels of the system hierarchy -Xcache, DRAM, and disk. . Evaluate the system-level effects of all design choices. . Model performance and energy consumption for each component in the memory hierarchy.}
}
@book{ftrace,
author = {Bird, Tim},
title = {Measuring Function Duration with Ftrace},
year = {2009},
journal = {Proceedings of the Linux Symposium}
}

